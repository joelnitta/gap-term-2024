---
title: "Gap Term 2024 春"
format:
  revealjs:
    incremental: false
    css: styles.css
    include-in-header: 
      text: |
        <style>
        .center-xy {
          margin: 0;
          position: absolute;
          top: 50%;
          left: 50%;
          -ms-transform: translateY(-50%), translateX(-50%);
          transform: translateY(-50%), translateX(-50%);
        }
        .center-x {
          margin: 0;
          position: absolute;
          left: 50%;
          -ms-transform: translateX(-50%);
          transform: translateX(-50%);
        }
        </style>
execute: 
  echo: true
author: ニッタ ジョエル
institute: <a href="https://joelnitta.com">https://joelnitta.com</a>
footer: <a href="https://joelnitta.github.io/gap-term-2024">https://joelnitta.github.io/gap-term-2024</a>
html:
  mathjax: true
---

```{r}
#| echo: false
options(width = 80)
```

## 目的

本授業の目的は**Rを使うことによって<br>フローサイトメーターのデータを解析する**<br>ことである

- Rの基本的な操作
- データ処理
- データの可視化

## リンク

- スライド： <https://joelnitta.github.io/gap-term-2024>

- コード： <https://github.com/joelnitta/gap-term-2023/blob/main/ploidy-analysis.R>

# Part I: R入門

## なぜコードを使うのか？

- 解析を**再現可能**にするため

## 再現性とは？

- 他の人（**将来の自分**を含めて）があなたの解析を<br>**再度行って、同じ結果**を得ることができること

## なぜR?

:::::: {.incremental}

- タダ
- 柔軟性
- 広く生態学に使われている
- コミュニティー

::::::

## RとRStudio 

:::: {.columns}

::: {.column width="50%"}
- Rとは「R Project for Statistical Computing」という組織が提供しているオープンソース（タダの）プログラミング言語
:::

::: {.column width="50%"}
![](https://www.r-project.org/logo/Rlogo.svg)
:::

::::

## RとRStudio

:::: {.columns}

::: {.column width="50%"}
- RStudioとはPosit社が提供しているIDE（Integrated Development Environment）
  - 基本的な機能はタダ
  - 会社向けの機能は有料
  - Rのコードを書く・実行する最適なソフト
:::

::: {.column width="50%"}
![](https://posit.co/wp-content/uploads/2022/10/thumbnail-3.jpg)
:::

::::

## 資料

:::: {.columns}

::: {.column width="50%"}
- [R for Reproducible Scientific Analysis（日本語）](https://swcarpentry-ja.github.io/r-novice-gapminder/ja/)

- R for Data Science
  - 英語版はオンラインで無料 [https://r4ds.had.co.nz/](https://r4ds.had.co.nz/)
  - 日本語版は[アマゾン](https://www.amazon.co.jp/R%E3%81%A7%E3%81%AF%E3%81%98%E3%82%81%E3%82%8B%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9-Hadley-Wickham/dp/487311814X)などから 
:::

::: {.column width="50%"}
![](https://m.media-amazon.com/images/I/91WTLn1DrBL.jpg)
:::

::::

## 解析の準備：プロジェクトを作る

- File → New Project → New Directory → New Project

- 名前と置く場所を選択する。名前は`flowcyt-analysis`にしよう。

- 場所は**自分が後で探しやすいところ**にしましょう（**デスクトップ**がおすすめ）

---

![](images/project-setup.png)

## プロジェクトを作る

- RStudioが再起動されて、新しいプロジェクトに入る

- 右下の「Files」パネルに以下のファイルが入っていることを確認：
  - `flowcyt-analysis.Rproj`
  - `.gitignore`（gitを使っている場合のみ）

---

![](images/new-project.png)

## `.Rproj`ファイルについて

- `flowcyt-analysis.Rproj`はRStudioの設定を保存するためのファイルで、基本的には**手でイジる必要はない**

- でも、このプロジェクトを開くためには便利
  - 一旦RStudioを閉じて、`flowcyt-analysis.Rproj`のアイコンをダブルクリックすると、またプロジェクトに入ることが出来る。

---

![](images/rproj-icon.png)

## データを置く場所を作る

- New Folderボタン（右下のパネル）をクリック→ `data_raw`というフォルダーを作る

---

![](images/new-folder.png)

## データを置く場所を作る

- Teamsで共有した以下のファイルをダウンロードして、`data_raw`に置きましょう
  - `itadori_flowcyt.xlsx`

---

![](images/project-data-added.png)

## データを置く場所を作る

- `data_raw`フォルダーを読み込み専用にしよう
  - **生データを手でいじらないのが鉄則**
  - Rに読み込んだ上でRの中で操りましょう

## 他のフォルダーを作る{.smaller}

続いて、同じように他の以下のフォルダーも作る：

- `data_raw/`
  - 生データを置く場所。生データは絶対にいじらない（読み込み専用）
- `data/`
  - コードによって整えられたデータを置く場所。使い捨てのつもりで良い。
- `results/`
  - コードによって得られた結果を置く場所。これも使い捨て。

**生データ**と**コード**があればいつでも結果は得られる（再現できる）

## RStudioのデフォルト設定を<br>変えましょう

前のセッションのデータが残っていることは<br>再現的に**ダメ**！

. . . 

Tools → Global Options → General → Workspace

- "Restore .RData into workspace at startup" → **外す**
- "Save workspace to .RData on exit:" → **"Never"**

## RStudioのデフォルト設定を<br>変えましょう

前のセッションのデータが残っていることは再現の観点<br>からダメ！

![](images/settings_change.png){fig-alt="Screenshot showing how to change Rstudio settings for .RData"}


## Rを計算機として使う

- RStudioのコンソール（左下のパネル）にカーソルを置いて、簡単な計算をしてみましょう：

::: large

```{r}
2 * 20
```

:::

::: {.incremental}
- おめでとうございます！Rプログラミングができました！
:::

## オブジェクト（変数）について

- 次に、Rの中のデータを変数（Rでは、「**オブジェクト** Object」と呼ぶ）として**保存**しよう：

::: large

```{r}
age <- 2 * 20
```

:::

## オブジェクト（変数）について

これだけでは何も返ってこない。

変数の内容を確認するには、コンソールにその変数の名前を打てば良い：

::: large

```{r}
age
```

:::

## 関数とは

何かの値（インプット）を受けて、処理して、計算結果（アウトプット）を返すもの

::: center-x

<img src="https://manamina.valuesccg.com/uploads/content/image/12292/__.png" alt="drawing" height="100">

::: small
<https://manamina.valuesccg.com/articles/756>
:::

:::

## 関数とは

関数の書き方：

- 関数名(引数)

例えば

::: large

```{r}
round(3.1415, digits = 1)
```

:::

## 関数とは

関数の使い方を確認したい時は`?関数名`と打って、ヘルプファイルを参照すれば良い

::: large

```{r}
#| eval: false
?round
```

:::

## パッケージとは

- Rパッケージとは、Rが出来ることを大幅に増やす「追加」のソフト（関数のまとまり）
  - 現在、**２万**近くのパッケージがある！

- 今回は`xlsx`ファイルを読み込むためのパッケージ、そして他のデータ解析をやりやすくするパッケージをインストールする

## パッケージのインストール

Rパッケージのインストールを行うには、`install.packages()`を使う：

::: large

```{r}
#| label: install
#| echo: true
#| eval: false
install.packages(c("readxl", "tidyverse"))
```

:::

一回インストールしたら、次回からはしなくて良いので、**これはコードとして書かない**

## パッケージのロード

- パッケージをインストールしたら、使える状態するにはロードすることが必要
  - インストールは一回でいい
  - ロードは毎回必要

`library()`関数でロードする：

::: large

```{r}
library(tidyverse)
```

:::

## データの読み込み

- 今回のデータは`.xlsx`なので、`readxl`パッケージの`read_excel()`関数を使う。

- このコードを`flowcyt-analysis.R`として保存してください：

```{r}
#| label: load-animals
library(readxl)

flow_cyt_data_raw <- read_excel(
  "data_raw/itadori_flowcyt.xlsx", sheet = 2
)
```

## データの読み込み

`flow_cyt_data_raw`を打つと、読み込まれたデータが表示され、基本情報（列と行の数など）が表示される：

```{r}
#| label: show-animals
#| eval: true

flow_cyt_data_raw
```

## データの読み込み

- `Environment`パネルの`flow_cyt_data_raw`をクリックすると、エクセルのような画面が出てくる

---

![](images/rstudio-viewer.png)

## データを整える

- 行の名前を確かめてください

::: {.incremental}

- 文字化けを防ぐために、なるべくローマ字表記がいい。ローマ字に変えよう

:::

## データを整える

以下のコードを試してください：

```{r}
#| label: clean-names-show
select(
  flow_cyt_data_raw,
  id_num = 通し番号,
  tomato_peak = トマト数値,
  sample_peak = サンプル数値)
```

---

## データを整える

行名がスッキリしたでしょう？

でも、どうやってこのデータのバージョンの保存ができるのでしょうか？

## データの（Rの中での）保存

```{r}
#| label: clean-names-save
library(readxl)

flow_cyt_data_raw <- read_excel(
  "data_raw/itadori_flowcyt.xlsx", sheet = 2
)

flow_cyt_data <- select(
  flow_cyt_data_raw,
  id_num = 通し番号,
  tomato_peak = トマト数値,
  sample_peak = サンプル数値)
```

## データの（Rの中での）保存

- **大事：** **`<-`**を使わないと計算結果が**保存されない**

- 同じ名前で保存すると（注意なしで）前のデータが上書きされる

- **コード**があれば、計算結果を**再現できる**ので、上書き・消去は**気にしなくて良い**

## 列の順を並び変える

- `arrange(data, column)`
  - デフォルトで小さいから大きい順

---

```{r}
arrange(flow_cyt_data, sample_peak)
```

## 列の順を並び変える

- デフォルトで小さい順（あるいは、Aの方）から並ぶ
- 大きい方（あるいは、Zの方）から並べたい時は`desc()`を使う

---

```{r}
arrange(flow_cyt_data, desc(sample_peak))
```

## 行を抜き出す

- `select(data, column)`で行を抜き出す

```{r}
select(flow_cyt_data, sample_peak)
```

## 行を抜き出す

- `select(data, column1, column2)`で行を抜き出す
  - 複数の行を選ぶこともできる

```{r}
select(flow_cyt_data, id_num, sample_peak)
```

## 行を抜き出す

- 全く別な方法もある：`$`
  - `$`を使うと、**行の中身**が返ってくる（データフレームではなく）

```{r}
flow_cyt_data$sample_peak
```

## 列を絞る

- `filter()`である条件に合っている列だけに絞る

```{r}
filter(flow_cyt_data, sample_peak > 0)
```

## チャレンジ

`flow_cyt_data`から"sample_peak"と"tomato_peak"のデータを切り出して、それぞれがゼロより大きい列だけに絞って下さい

## データの変換

- `mutate()`は新しい行を作ることができる

---

```{r}
tomato_size_pg <- 1.96

flow_cyt_data_size <-
  mutate(
    flow_cyt_data,
    sample_size = sample_peak * tomato_size_pg / tomato_peak)
```

```{r}
#| echo: false
flow_cyt_data_size
```

## データの変換

- `mutate()`である行のデータを変換することもできる

---

```{r}
# 例えば、pgでなく、ng表記がいいとしたら
mutate(flow_cyt_data_size, sample_size = sample_size * 1e3)
```

## パイプについて

今までのやり方では、複数の処理をする際、それぞれのアウトプットに名前をつけていた：

> `flow_cyt_data`から"sample_peak"と"tomato_peak"のデータを切り出して、それぞれがゼロより大きい列だけに絞って下さい

```{r}
sample_peak_1 <- select(flow_cyt_data, sample_peak, tomato_peak)
sample_peak_2 <- filter(sample_peak_1, sample_peak > 0, tomato_peak > 0)
```

でもこれは処理が多くなるとややこしくなってくる。

**もっといい方法はある：パイプ**

## パイプについて

「パイプ」とは、左の関数のアウトプットを右の関数の<br>インプットに渡すもの

<br>

`%>%`（あるいは`|>`）と書く。「**それから**」として読む

## パイプについて

- 先の作業はパイプを使うとこのようにできる

---

```{r}
flow_cyt_data %>%
  select(sample_peak, tomato_peak) %>%
  filter(sample_peak > 0, tomato_peak > 0)
```

- この方がスッキリするでしょう？

## チャレンジ

- パイプを使うことによって以下の段階を含むパイプラインを組んでください：
  - 生データを読み込む
  - 必要な行だけに絞る
  - 欠測データを排除する
  - ゲノムサイズを計算する

<!--
```{r}
flow_cyt_data <- 
  # 生データを読み込む
  read_excel("data_raw/itadori_flowcyt.xlsx", sheet = 2) %>%
  # 必要な行だけに絞る
  select(id_num = 通し番号,
    tomato_peak = トマト数値, sample_peak = サンプル数値) %>%
  # 欠測データを排除する
  filter(sample_peak > 0, tomato_peak > 0) %>%
  # ノムサイズを計算する
  mutate(sample_size = sample_peak * tomato_size_pg / tomato_peak)
```
-->

# 休憩

# Part II: ggplot2による図の作成

## ggplot2について

- Rには備え付けの関数、`plot()`があるが、今回は`tidyverse`の`ggplot2`パッケージを使う

- `gg` = "**G**rammar of **G**raphics"（画像の文法）
  - 「文法」が分かれば、（ほとんど）<br>どんな図でも作れる

## ggplot2について

図の構造にはいくつか**決まった要素**がある

- **geometry**: 図はどのような**形**にする？

- **aesthetics**: データをどのように図に**表す**？

## Geometry

:::: {.columns}

::: {.column width="50%"}
Pie chart
<br><br>
<img src="https://clauswilke.com/dataviz/proportional_ink_files/figure-html/RI-pop-pie-1.png" alt="drawing" height="220">
:::

::: {.column width="50%"}
Bar graph
<br><br>
<img src="https://clauswilke.com/dataviz/proportional_ink_files/figure-html/RI-pop-bars-1.png" alt="drawing" height="220">
:::

::::

:::: {.aside}
::: {.small}
https://clauswilke.com/dataviz/proportional-ink.html
:::
::::

## Aesthetics

<img src="https://clauswilke.com/dataviz/aesthetic_mapping_files/figure-html/common-aesthetics-1.png" alt="drawing" height="250">

:::: {.aside}
::: {.small}
https://clauswilke.com/dataviz/aesthetic-mapping.html
:::
::::

## ggplot2の基本的な使い方

![](images/ggplot-summary-1.png)

## ggplot2の基本的な使い方

![](images/ggplot-summary-2.png)

---

```{r}
#| output-location: column
ggplot(flow_cyt_data)
```

---

```{r}
#| output-location: column
ggplot(
  flow_cyt_data,
  aes(
    x = sample_peak,
    y = tomato_peak)
  )
```

---

```{r}
#| output-location: column
ggplot(
  flow_cyt_data,
  aes(
    x = sample_peak,
    y = tomato_peak)
  ) +
  geom_point()
```

## チャレンジ

`sample_size`を横軸、`sample_peak`を縦軸にして、点グラフを作成して下さい

## 倍数性の解析と可視化を一緒に<br>しよう

- フローサイトメーターは直接に倍数性を教えてくれない。

- このデータからどうやって倍数性を推測することができるのか？

- まずはゲノムサイズの**分布**を可視化してみよう

## ヒストグラムの作成

```{r}
#| output-location: column
#| warning: true
ggplot(
  flow_cyt_data,
  aes(x = sample_size)) +
  geom_histogram()
```

## ヒストグラムの作成

```{r}
#| output-location: column
ggplot(
  flow_cyt_data,
  aes(x = sample_size)) +
  geom_histogram(bins = 50)
```

## チャレンジ

- `bins`の値を色々試して見てください。

- どの設定が一番いいと思いますか？

## 倍数性の測定

- 倍数性とゲノムサイズは相関関係があるはず
  - 4xは2xの倍の大きさ、など

- 先行研究では、イタドリは2x, 4x, 6x, 8xが知られている（とする）

## チャレンジ

- もう一度ヒストグラムを作成してください。

- ヒストグラムのどこからどこまでがそれぞれの倍数性に一致すると思いますか？

# 休憩

# Part III: kmeans法に<br>よる倍数性の分け方

## チャレンジ

> もう一度ヒストグラムを作成してください。

> ヒストグラムのどこからどこまでがそれぞれの倍数性に一致すると思いますか？

## グループ分けの仕方

- 目で見て判断するのはなかなか**難しい**ですね。

- 適当に決めるのではなく、**アルゴリズム**を使ってみよう

## グループ分けの仕方：kmeans

- kmeansとは、連続的なデータを**グループ分けする<br>アルゴリズム**

---

![](https://miro.medium.com/v2/resize:fit:1200/1*rw8IUza1dbffBhiA4i0GNQ.png)

:::: {.aside}
::: {.small}
https://miro.medium.com/v2/resize:fit:1200/1*rw8IUza1dbffBhiA4i0GNQ.png
:::
::::

## kmeansの仕組み

1. 最初の重点を*k*個ランダムに置く（◯）
2. 格データポイント（◾️）を最も近い重点（◯）によってグールプ分けする（色）
3. それぞれのグループの新しい重点を計算する
4. グループが変わらないまで 2.--3. を繰り返す

![](images/kmeans.png)

## kmeansの仕組み

![](https://upload.wikimedia.org/wikipedia/commons/e/ea/K-means_convergence.gif)

## kmeansの仕組み：ポイント

- あらかじめグループの数（*k*）を設定する必要がある
- 始まりが**ランダム**
- よって、毎回結果が**違う**

# 早速、倍数性データに使ってみよう

---

```{r}
kmeans(flow_cyt_data$sample_size, centers = 4)
```

## チャレンジ

`kmeans()`関数をもう一度、**全く同じように**使ってみて、前の結果と比べてみてください。何かに気が付きましたか？

## 乱数生成

::: {.incremental}

- `kmeans()`は**ランダム**なところからスタートすることによって、**結果が毎回（ちょっと）違う**
- でも解析を**再現したいとき**はどうすれば良い？毎回違うと困るのではないか？
- 解決方法：`set.seed()`によって、ランダムな数字を**固定させる**

:::

## 乱数生成

`runif()`は0-1の間のランダムな数字を返す

::: large

```{r}
runif(1)
```

:::

皆さんの結果はどうですか？私のと同じでしょうか？

## 乱数生成

`set.seed()`は、ランダムな数字を**固定させる**

::: large

```{r}
set.seed(123) # インプットは数字であれば、なんでも良い
runif(1)
```

:::

今度はどうですか？

## 乱数生成

というわけで、`kmeans()`を使う前に、`set.seed()`を使いましょう。

## kmeansによる倍数性のグループ分け

```{r}
set.seed(123)
size_clusters <- kmeans(flow_cyt_data$sample_size, centers = 4)
```

```{r}
#| echo: false
size_clusters
```

## リストについて

`kmeans()`の出力は**リスト**となっている。

リストの要素を取り出すのに、`$`を使う：

```{r}
size_clusters$centers
```

図を作る時、このリストに入っているデータを使う。

## 分けたグループをプロットしよう

kmeansのグループを倍数性に当てる

```{r}
flow_cyt_data <-
  flow_cyt_data %>%
  mutate(cluster = size_clusters$cluster) %>%
  mutate(ploidy = case_when(
    cluster == 1 ~ "6x",
    cluster == 2 ~ "8x",
    cluster == 3 ~ "2x",
    cluster == 4 ~ "4x"
  )) %>%
  mutate(ploidy = factor(ploidy, levels = c("2x", "4x", "6x", "8x")))
```

## 分けたグループをプロットしよう

まずは、ポイント（点）だけ

```{r}
#| output-location: column
ggplot(flow_cyt_data,
  aes(
    x = sample_size,
    y = ploidy)) +
  geom_point()
```

でも点が重なっていて見づらい・・

---

- geom_point()ではなく、geom_jitter()を使いましょう
  - geom_jitter()はポイントの位置を適当にバラす

```{r}
#| output-location: column
ggplot(flow_cyt_data,
  aes(
    x = sample_size,
    y = ploidy)) +
  geom_jitter()
```

わかりやすくなりました。

次に、またヒストグラムに戻りましょう。

---

```{r}
#| output-location: column
ggplot(flow_cyt_data,
  aes(x = sample_size)) +
  geom_histogram(bins = 50)
```

---

`geom_vline()`（縦線を書く関数）を使って、重点の位置をプロットしよう

```{r}
#| output-location: column
ggplot(flow_cyt_data,
  aes(x = sample_size)) +
  geom_histogram(bins = 50) +
  geom_vline(
    data = as_tibble(
      size_clusters$centers),
    aes(xintercept = V1)
  )
```

---

`geom_rug()`（マージンにデータをプロットする関数）を使って、ポイントの位置を確かめよう

```{r}
#| output-location: column
ggplot(flow_cyt_data,
  aes(x = sample_size)) +
  geom_histogram(bins = 50) +
  geom_vline(
    data = as_tibble(
      size_clusters$centers),
    aes(xintercept = V1)
  ) +
  geom_rug(aes(color = ploidy))
```

::: {.incremental}

- 倍数性プロットの完成！

:::

## チャレンジ

- 倍数性はこれでいいと思いますか？

- 怪しい点はありませんか？

## まとめ

::: {.incremental}

- **データ**と**コード**があれば、計算結果の**再現**ができる

- 倍数性は目で適当に決めるよりも、アルゴリズムを使った方が**客観的で再現性が高い**
  - でも、**だからと言って絶対に正解だと言えない**（そもそものデータにノイズが多すぎると、無理なこともある）
  - 他のデータ（**染色体観察**など）で確かめる必要がある

:::

---

![](images/squash.png)

::: {.small}
Motsa, M.M., Bester, C., Slabbert, M.M. et al. Flow cytometry: a quick method to determine ploidy levels in honeybush (Cyclopia spp.). Genet Resour Crop Evol 65, 1711–1724 (2018). 
:::